temp_data <- read.csv(file = "001.csv", sep = ",", dec = ".", nrows = 500)
res_data <- data.frame(str(temp_data))
for (i in 1:length(id)){
raw_data <- read.csv(lf[i], sep = ",", dec = ".")
res_data <- rbind ( res_data, raw_data )
}
if (pollutant == 'sulfate')
{result_mean <- mean(res_data$sulfate , na.rm = TRUE)}
else (pollutant == 'nitrate')
{result_mean <- mean(res_data$nitrate , na.rm = TRUE)}
setwd("/Users/i312190/Desktop/Data Science")
result_mean
}
getwd()
setwd("~/Desktop/Data Science")
list.files
list.files()
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
pollutantmean("specdata", "sulfate", 1:10)
setwd("specdata")
lf <-list.files(pattern = "*.csv")
temp_data <- read.csv(file = "001.csv", sep = ",", dec = ".", nrows = 500)
res_data <- data.frame(str(temp_data))
help("data.frame")
View(temp_data)
View(res_data)
View(temp_data)
T <- str(temp_data)
help("str")
str(temp_data)
for (i in 1:length(id)){
raw_data <- read.csv(lf[i], sep = ",", dec = ".")
res_data <- rbind ( res_data, raw_data )
}
id = c(1:10)
for (i in 1:length(id)){
raw_data <- read.csv(lf[i], sep = ",", dec = ".")
res_data <- rbind ( res_data, raw_data )
}
View(res_data)
help("mean")
result_mean <- mean(res_data$sulfate , na.rm = TRUE)
help("if")
setwd("/Users/i312190/Desktop/Data Science")
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
pollutantmean("specdata", "nitrate", 70:72)
source("pollutantmean.R")
pollutantmean("specdata", "nitrate", 70:72)
source("pollutantmean.R")
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
pollutantmean("specdata", "sulfate", 1:10)
raw_data <- read.csv("001.csv", sep = ",", dec = ".")
setwd("specdata")
raw_data <- read.csv("001.csv", sep = ",", dec = ".")
good_data <- raw_data[raw_data[2]!="NA" &raw_data[3]!="NA"]
View(raw_data)
View(raw_data)
good_data <- raw_data[raw_data[2]!=0]
good_data
good_data <- raw_data[raw_data$sulfate!="NA"]
help("count")
help("nrow")
help("NROW")
raw_data(raw_data[2]!="NA")
good_data <- raw_data(raw_data[2]!="NA")
raw_data[raw_data[2]!="NA"]
complete.cases(raw_data)
good_data <- raw_data [complete.cases(raw_data)]
good_data <- raw_data[complete.cases(raw_data)]
good_data <- raw_data[complete.cases(raw_data), ]
View(good_data)
res_table <- data.frame(i, nrow(good_data) )
res_table <- data.frame( 1, nrow(good_data) )
View(res_table)
colnames(res_table) <- c("id","nobs")
rest <- data.frame()
colnames(rest) <- c("id","nobs")
rest <- data.frame()
setwd("/Users/i312190/Desktop/Data Science")
source("complete.R")
source("complete.R")
source("complete.R")
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
source("complete.R")
setwd("/Users/i312190/Desktop/Data Science")
source("complete.R")
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
source('~/Desktop/Data Science/complete.R')
complete("specdata", c(2, 4, 8, 10, 12))
source('~/Desktop/Data Science/complete.R')
source('~/Desktop/Data Science/complete.R')
complete("specdata", c(2, 4, 8, 10, 12))
setwd("/Users/i312190/Desktop/Data Science")
complete("specdata", c(2, 4, 8, 10, 12))
source('~/Desktop/Data Science/complete.R')
setwd("/Users/i312190/Desktop/Data Science")
complete("specdata", c(2, 4, 8, 10, 12))
ls
source('~/Desktop/Data Science/Week3_BEG.R')
makeVector(3)
cachemean(3)
x = (1, 2, 3, 4)
x = c(1, 2, 3, 4)
cachemean(x)
source('~/Desktop/Data Science/Week3_RES.R')
source('~/Desktop/Data Science/Week3_RES.R')
View(makecachematrix)
View(makecachematrix)
View(makecachematrix)
source('~/Desktop/Data Science/Week3_RES.R')
library(datasets)
data(iris)
?iris
apply(iris, 1, mean)
apply(iris, 2, mean)
apply(iris, 2, mean(, na.rm = TRUE))
apply(iris, 2, mean(iris, na.rm = TRUE))
apply(iris, 2, mean()na.rm = TRUE)
apply(iris, 2, mean(), na.rm = TRUE)
apply(iris, 2, mean, na.rm = TRUE)
apply(iris, 2, mean, na.rm = FALSE)
?mean
apply(iris, 2, mean, na.rm = TRUE )
sapply(iris, 2, mean, na.rm = TRUE )
sapply(iris, mean, na.rm = TRUE )
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars$mpg, mtcars$cyl)
split(mtcars$hp, mtcars$cyl)
?average
k <- split(mtcars$hp, mtcars$cyl)
mean(k$`4`)
mean(k$`8`)
debug(ls)
ls
ls
?debug
ls?
library(datasets)
library(datasets)
data(iris)
?iris
debug(ls)
library(datasets)
data(iris)
?iris
sapply(iris, mean, rn.na = TRUE)
k <- iris
View(k)
mean(k[1])
mean(k[,1])
split(iris[,1], iris[ ,5])
k <- split(iris[,1], iris[ ,5])
mean(k[,3])
mean(k[ , 3])
mean(k[3])
mean(k$setosa)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
lapply(mtcars, mean)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
split(mtcars$hp, mtcars$cyl)
k <- split(mtcars$hp, mtcars$cyl)
j <- split(mtcars$hp, mtcars$cyl)
mean(j$`4`)
mean(j$`8`)
mean(j$`4`) - mean(j$`8`)
with(mtcars, tapply(mpg, cyl, mean))
apply(iris[, 1:4], 2, mean)
library(datasets)
data(iris)
?iris
u <- split(iris$Sepal.Length, iris$Species)
mean(u$virginica)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
set.seed(1)
rpois(5, 2)
rnorm?
help(rnorm)
?rnorn
set.seed(10)
x <- rep(0:1, each = 5)
x
âˆš
x <- rep(0:1, each = 5)
X
x
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
url <- https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url)
installed.packages("RMySQL")
installed.packages("RMySQL")
install.packages("rMySQL")
install.packages("RMySQL")
library("RMySQL", lib.loc="~/Library/R/3.4/library")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
library(httr)
download.packages("httr")
install.packages("httr")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "362eee7e329a0c878932",
secret = "f8cd8b279f852082fbf276a0da7804ae1bf467c1")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
myapp <- oauth_app("github",
+                    key = "362eee7e329a0c878932",
+                    secret = "f8cd8b279f852082fbf276a0da7804ae1bf467c1")
myapp <- oauth_app("github",
key = "362eee7e329a0c878932",
secret = "f8cd8b279f852082fbf276a0da7804ae1bf467c1")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "362eee7e329a0c878932",
secret = "f8cd8b279f852082fbf276a0da7804ae1bf467c1")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
?stop_for_status
myapp <- oauth_app("01_GitHub_temp",
key = "362eee7e329a0c878932",
secret = "f8cd8b279f852082fbf276a0da7804ae1bf467c1")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("01_GitHub_temp",
key = "362eee7e329a0c878932",
secret = "f8cd8b279f852082fbf276a0da7804ae1bf467c1")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
gtoken <- config(token = github_token)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("01_GitHub_temp",
key = "362eee7e329a0c878932",
secret = "f8cd8b279f852082fbf276a0da7804ae1bf467c1")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
req <- GET("https://api.github.com/rate_limit", gtoken)
install.packages("jsonlite")
install.packages("Httpuv")
install.packages("httpuv")
library("jsonlite", lib.loc="~/Library/R/3.4/library")
library("httr", lib.loc="~/Library/R/3.4/library")
library("httpuv", lib.loc="~/Library/R/3.4/library")
oauth_endpoints("github")
myapp <- oauth_app("01_GitHub_temp",
key = "362eee7e329a0c878932",
secret = "f8cd8b279f852082fbf276a0da7804ae1bf467c1")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library("jsonlite", lib.loc="~/Library/R/3.4/library")
library("httpuv", lib.loc="~/Library/R/3.4/library")
library("httr", lib.loc="~/Library/R/3.4/library")
oauth_endpoints("github")
myapp <- oauth_app("01_GitHub_temp",
key = "362eee7e329a0c878932",
secret = "f8cd8b279f852082fbf276a0da7804ae1bf467c1")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
library("jsonlite", lib.loc="~/Library/R/3.4/library")
library("httpuv", lib.loc="~/Library/R/3.4/library")
library("httr", lib.loc="~/Library/R/3.4/library")
oauth_endpoints("github")
myapp <- oauth_app("01_GitHub_temp",
key = "362eee7e329a0c878932",
secret = "f8cd8b279f852082fbf276a0da7804ae1bf467c1")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
myapp <- oauth_app("02_TEMP_GIT",
key = "e9baee3d2e39bf259f53",
secret = "dd38452f8f029b94a0fc77d69d30d8afb510c935")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library("XML", lib.loc="~/Library/R/3.4/library")
df1 <- xmlToDataFrame(req)
?xmlToDataFrame
df1 <- xmlToDataFrame( req )
json1 = content(req)
df1 = jsonlite::fromJSON(json1)
df1 = jsonlite::fromJSON(jsonlite::fromJSON(json1))
df1 = jsonlite::fromJSON(jsonlite::toJSON(json1))
View(df1)
View(df1)
View(df1)
df1[df1$full_name = "jtleek/datasharing", "created_at"]
df1[df1$full_name == "jtleek/datasharing", "created_at"]
install.packages("RCurl")
library("RCurl", lib.loc="~/Library/R/3.4/library")
urlcsv <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
x <- getURL(urlcsv)
acs <- read.csv(x)
acs <- read.csv(file = urlcsv)
acs[acs$RT, RT]
acs[acs$RT != NA, "RT"]
?read.csv
acs
install.packages("sqldf")
sqldf("select pwgtp1 from acs where AGEP < 50")
library("sqldf", lib.loc="~/Library/R/3.4/library")
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select top 20 pwgtp1 from acs where AGEP < 50")
sqldf("select pwgtp1 from acs where AGEP < 50 limit 10")
sqldf("select pwgtp1, AGEP from acs where AGEP < 50 limit 10")
unique(acs$AGEP)
sqldf("select distinct AGEP from acs")
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlCode
htmlCode[10]
nchair(htmlCode[10])
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
urlf <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
read.fortran(file = urlf )
df1 <- read.fwf(file = urlf, skip = 4, widths = c(9, 4, 3, 4, 3, 4, 3, 4, 3))
View(df1)
df1 <- read.fwf(file = urlf, skip = 4, widths = c(10, 4, 3, 4, 3, 4, 3, 4, 3))
df1 <- read.fwf(file = urlf, skip = 4, widths = c(-1, 9, 4, 3, 4, 3, 4, 3, 4, 3))
df1 <- read.fwf(file = urlf, skip = 4, widths = c(-1, 9, -5, 4, -1, 3, -5, 4, -1, 3, -5, 4, -1, 3, -5, 4, -1, 3))
?sum
sum(df1$V4)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?xyplot
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
?xyplot
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
install.packages("ggplot2")
library("ggplot2", lib.loc="~/Library/R/3.4/library")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?qplot()
library(ggplot2)
library(ggplot2movies)
install.packages("ggplot2movies")
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies) + geom_smooth()
setwd("~/Desktop/Data Science/UNIT5/WEEK2/RepData_PeerAssessment1")
Sys.setenv(TZ="Europe/Moscow")
raw.data <- read.csv(unzip("activity.zip"))
raw.data$date <- as.Date(raw.data$date, format = "%Y-%m-%d", tz = getOption("tz"))
data.rm.na <- raw.data[!is.na(raw.data$steps),]
h1 <- hist(data.rm.na$date, breaks = "day", plot = FALSE)
breaks <- data.frame("beg" = h1$breaks[-length(h1$breaks)], "end" = h1$breaks[-1])
sums <- apply(breaks, MARGIN=1, FUN=function(x) { sum(data.rm.na$steps[ data.rm.na$date >= x[1] & data.rm.na$date < x[2] ]) })
h1$counts <- sums
plot(h1, ylab = "Total number of steps", xlab = "Date", main = " ")
aggr.data <- aggregate(raw.data$steps ~ raw.data$date, data = raw.data, sum, na.rm = TRUE)
step.median <- median(aggr.data$`raw.data$steps`, na.rm = TRUE)
step.mean <- mean(aggr.data$`raw.data$steps`, na.rm = TRUE)
names(aggr.data) <- c("Date", "Total Steps")
daily.pattern.data <- aggregate(raw.data$steps ~ raw.data$interval, data = raw.data, mean, na.rm = TRUE )
max.interval <- daily.pattern.data$`raw.data$interval`[daily.pattern.data$`raw.data$steps` == max(daily.pattern.data$`raw.data$steps`)]
plot(daily.pattern.data$`raw.data$interval`, daily.pattern.data$`raw.data$steps`, type = "l", xlab = "5 minute interval", ylab = "Average steps")
new.data <- raw.data
miss.steps <- new.data$steps[is.na(new.data$steps)]
new.data$steps[is.na(new.data$steps)] <- daily.pattern.data$`raw.data$steps`[match(new.data$interval, daily.pattern.data$`raw.data$interval`)]
h2 <- hist(new.data$date, breaks = "day", plot = FALSE)
breaks <- data.frame("beg" = h2$breaks[-length(h2$breaks)], "end" = h2$breaks[-1])
sums <- apply(breaks, MARGIN=1, FUN=function(x) { sum(new.data$steps[ new.data$date >= x[1] & new.data$date < x[2] ]) })
h2$counts <- sums
plot(h2, ylab = "Total number of steps", xlab = "Date", main = " " )
plot(h1, ylab = "Total number of steps", xlab = "Date", main = " ", add = T, col = "red")
aggr.data <- aggregate(new.data$steps ~ new.data$date, data = new.data, sum, na.rm = TRUE)
step.median <- median(aggr.data$`new.data$steps`, na.rm = TRUE)
step.mean <- mean(aggr.data$`new.data$steps`, na.rm = TRUE)
names(aggr.data) <- c("Date", "Total Steps")
step.median
step.mean
check.data <- new.data
check.data$weekpart <- NA
View(check.data)
check.data$weekpartn[!is.weekend(check.data$date)] <- 0
?is.weekend
install.packages("chron")
library("chron", lib.loc="~/Library/R/3.4/library")
check.data$weekpartn[!is.weekend(check.data$date)] <- 0
check.data$weekpartn[is.weekend(check.data$date)] <- 1
str(check.data)
check.data$weekpartn <- as.integer(check.data$weekpartn)
str(weekpartn)
str(check.data)
check.data$weekpartn <- as.factor(check.data$weekpartn, c("weekday", "weekend"))
?as.factor()
check.data$weekpartn <- as.factor(check.data$weekpartn, levels = c("weekday", "weekend"))
check.data$weekpartn <- as.factor(check.data$weekpartn)
levels(check.data$weekpartn) <- c("weekday", "weekend")
str(check.data)
check.data$weekpartn <- factor(check.data$weekpartn, levels = c("weekday", "weekend"))
str(check.data)
?par
mfrow = c(2,1)
aggr.data1 <- aggregate(check.data$steps ~ check.data$weekpartn + check.data$interval, data = new.data, sum, na.rm = TRUE)
?plot
qplot(aggr.data1$`check.data$interval`, aggr.data1$`check.data$steps`| aggr.data1$`check.data$weekpartn`, data = aggr.data1)
library("ggplot2", lib.loc="~/Library/R/3.4/library")
qplot(aggr.data1$`check.data$interval`, aggr.data1$`check.data$steps`| aggr.data1$`check.data$weekpartn`, data = aggr.data1)
qplot(aggr.data1$`check.data$interval`, aggr.data1$`check.data$steps`, data = aggr.data1, facets = aggr.data1$`check.data$weekpartn` ~. )
plot(aggr.data1$`check.data$interval`, aggr.data1$`check.data$steps`)
plot(aggr.data1$`check.data$interval`[aggr.data1$`check.data$weekpartn`= 1], aggr.data1$`check.data$steps`[aggr.data1$`check.data$weekpartn`= 1])
plot(aggr.data1$`check.data$interval`[aggr.data1$`check.data$weekpartn`== 1], aggr.data1$`check.data$steps`[aggr.data1$`check.data$weekpartn`== 1])
plot(aggr.data1$`check.data$interval`[aggr.data1$`check.data$weekpartn`== 0], aggr.data1$`check.data$steps`[aggr.data1$`check.data$weekpartn`== 0])
View(check.data)
View(aggr.data1)
View(aggr.data1)
qplot(aggr.data1$`check.data$interval`, aggr.data1$`check.data$steps`, data = aggr.data1, facets = aggr.data1$`check.data$weekpartn` ~. )
qplot(aggr.data1$`check.data$interval`, aggr.data1$`check.data$steps`, data = aggr.data1, facets = aggr.data1$`check.data$weekpartn` )
?qplot
qplot(aggr.data1$`check.data$interval`, aggr.data1$`check.data$steps`, data = aggr.data1, facets = `check.data$weekpartn` ~. )
aggr.data1 <- aggregate(check.data$steps ~ check.data$weekpartn + check.data$interval, data = new.data, mean, na.rm = TRUE)
qplot(aggr.data1$`check.data$interval`, aggr.data1$`check.data$steps`, data = aggr.data1, facets = `check.data$weekpartn` ~. )
qplot(`check.data$interval`,`check.data$steps`, data = aggr.data1, facets = `check.data$weekpartn` ~. )
qplot(`check.data$interval`,`check.data$steps`, data = aggr.data1, facets = `check.data$weekpartn` ~. , geom = line)
qplot(`check.data$interval`,`check.data$steps`, data = aggr.data1, facets = `check.data$weekpartn` ~. , geom = "line")
enriched.data <- new.data
enriched.data$weekpart[!is.weekend(enriched.data$date) ] <- 0
er <- new.data
er$weekpart[!is.weekend(er$date) ] <- 0
enriched.data <- new.data
enriched.data$weekpart[!is.weekend(enriched.data$date) ] <- 0
enriched.data$weekpart[is.weekend(enriched.data$date) ] <- 1
enriched.data <- new.data
enriched.data$weekpart[!is.weekend(enriched.data$date) ] <- 0
enriched.data$weekpart[is.weekend(enriched.data$date) ] <- 1
enriched.data$weekpart <- factor(enriched.data$weekpart, levels = c("weekday", "weekend"))
aggr.data.w <- aggregate(enriched.data$steps ~ enriched.data$weekpart + enriched.data$interval, data = enriched.data, mean, na.rm = TRUE)
View(enriched.data)
enriched.data$weekpart[!is.weekend(enriched.data$date) ] <- 0
library("dplyr", lib.loc="~/Library/R/3.4/library")
library("chron", lib.loc="~/Library/R/3.4/library")
library("dplyr", lib.loc="~/Library/R/3.4/library")
enriched.data <- new.data
enriched.data <- mutate(enriched.data, weekpart = ifelse(is.weekend(date) == TRUE, 1, 0))
enriched.data$weekpart <- factor(enriched.data$weekpart, levels = c("weekday", "weekend"))
enriched.data <- mutate(enriched.data, weekpart = ifelse(is.weekend(date) == TRUE, 1, 0))
enriched.data$weekpart <- factor(enriched.data$weekpart)
levels(enriched.data$weekpart) = c("weekday", "weekend")
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="~/Library/R/3.4/library")
